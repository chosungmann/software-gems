;Photoshop version 1.0.1, file: USeparation.a
;  Computer History Museum, www.computerhistory.org
;  This material is (C)Copyright 1990 Adobe Systems Inc.
;  It may not be distributed to third parties.
;  It is licensed for non-commercial use according to 
;  www.computerhistory.org/softwarelicense/photoshop/ 

			INCLUDE 	'Traps.a'

; **********************************************************************

			SEG 	'APreferences'

LogTable8	PROC	EXPORT

			DC.W	65535,56422,49364,45236,42306,40034,38178,36608
			DC.W	35249,34049,32977,32006,31120,30305,29551,28848
			DC.W	28191,27574,26992,26441,25919,25422,24948,24496
			DC.W	24063,23647,23248,22863,22493,22136,21790,21457
			DC.W	21133,20820,20516,20221,19934,19655,19384,19119
			DC.W	18861,18610,18364,18125,17891,17662,17438,17219
			DC.W	17005,16795,16589,16388,16190,15996,15806,15619
			DC.W	15435,15255,15078,14904,14733,14564,14399,14236
			DC.W	14076,13918,13762,13609,13458,13310,13163,13019
			DC.W	12876,12736,12597,12461,12326,12193,12061,11932
			DC.W	11804,11677,11552,11429,11307,11186,11067,10949
			DC.W	10833,10718,10604,10492,10380,10270,10161,10054
			DC.W	 9947, 9842, 9737, 9634, 9531, 9430, 9330, 9230
			DC.W	 9132, 9035, 8938, 8843, 8748, 8654, 8561, 8469
			DC.W	 8378, 8287, 8197, 8108, 8020, 7933, 7846, 7760
			DC.W	 7675, 7591, 7507, 7424, 7341, 7259, 7178, 7098
			DC.W	 7018, 6939, 6860, 6782, 6705, 6628, 6551, 6476
			DC.W	 6401, 6326, 6252, 6178, 6105, 6033, 5961, 5890
			DC.W	 5819, 5748, 5678, 5609, 5540, 5471, 5403, 5335
			DC.W	 5268, 5201, 5135, 5069, 5004, 4939, 4874, 4810
			DC.W	 4746, 4682, 4619, 4557, 4494, 4432, 4371, 4310
			DC.W	 4249, 4189, 4129, 4069, 4009, 3950, 3892, 3833
			DC.W	 3775, 3718, 3660, 3603, 3547, 3490, 3434, 3378
			DC.W	 3323, 3268, 3213, 3158, 3104, 3050, 2996, 2943
			DC.W	 2889, 2836, 2784, 2732, 2679, 2628, 2576, 2525
			DC.W	 2474, 2423, 2372, 2322, 2272, 2222, 2173, 2123
			DC.W	 2074, 2026, 1977, 1929, 1880, 1832, 1785, 1737
			DC.W	 1690, 1643, 1596, 1550, 1503, 1457, 1411, 1365
			DC.W	 1320, 1274, 1229, 1184, 1140, 1095, 1051, 1006
			DC.W	  962,  919,  875,  832,  788,  745,  702,  660
			DC.W	  617,  575,  533,  491,  449,  407,  366,  325
			DC.W	  283,  242,  202,  161,  121,   80,   40,    0
			
; **********************************************************************

			SEG 	'APreferences'

LogTable12	PROC	EXPORT

			DC.W	65535,60495,55454,52505,50412,48789,47463,46342
			DC.W	45371,44514,43748,43055,42422,41840,41301,40799
			DC.W	40330,39889,39473,39080,38707,38352,38014,37690
			DC.W	37381,37084,36799,36524,36260,36005,35758,35520
			DC.W	35289,35065,34848,34637,34432,34233,34039,33850
			DC.W	33666,33486,33311,33140,32973,32809,32649,32493
			DC.W	32340,32190,32043,31899,31758,31619,31483,31350
			DC.W	31219,31090,30963,30839,30717,30597,30478,30362
			DC.W	30247,30135,30024,29914,29806,29700,29596,29492
			DC.W	29391,29290,29191,29094,28998,28902,28809,28716
			DC.W	28624,28534,28445,28357,28270,28184,28098,28014
			DC.W	27931,27849,27768,27687,27608,27529,27452,27375
			DC.W	27298,27223,27148,27075,27002,26929,26858,26787
			DC.W	26716,26647,26578,26509,26442,26375,26308,26243
			DC.W	26177,26113,26049,25985,25922,25860,25798,25736
			DC.W	25676,25615,25555,25496,25437,25379,25321,25263
			DC.W	25206,25150,25093,25038,24982,24927,24873,24819
			DC.W	24765,24712,24659,24607,24554,24503,24451,24400
			DC.W	24350,24299,24249,24200,24150,24101,24053,24004
			DC.W	23956,23909,23861,23814,23767,23721,23675,23629
			DC.W	23583,23538,23493,23448,23404,23359,23315,23272
			DC.W	23228,23185,23142,23100,23057,23015,22973,22931
			DC.W	22890,22849,22808,22767,22727,22686,22646,22606
			DC.W	22567,22527,22488,22449,22410,22372,22333,22295
			DC.W	22257,22219,22182,22144,22107,22070,22033,21997
			DC.W	21960,21924,21888,21852,21816,21781,21745,21710
			DC.W	21675,21640,21605,21571,21537,21502,21468,21434
			DC.W	21401,21367,21334,21300,21267,21234,21201,21169
			DC.W	21136,21104,21071,21039,21007,20976,20944,20912
			DC.W	20881,20850,20818,20787,20757,20726,20695,20665
			DC.W	20634,20604,20574,20544,20514,20484,20455,20425
			DC.W	20396,20367,20337,20308,20279,20251,20222,20193
			DC.W	20165,20137,20108,20080,20052,20024,19996,19969
			DC.W	19941,19914,19886,19859,19832,19805,19778,19751
			DC.W	19724,19697,19671,19644,19618,19592,19565,19539
			DC.W	19513,19487,19461,19436,19410,19384,19359,19334
			DC.W	19308,19283,19258,19233,19208,19183,19158,19134
			DC.W	19109,19084,19060,19036,19011,18987,18963,18939
			DC.W	18915,18891,18867,18844,18820,18796,18773,18749
			DC.W	18726,18703,18680,18657,18633,18611,18588,18565
			DC.W	18542,18519,18497,18474,18452,18429,18407,18385
			DC.W	18362,18340,18318,18296,18274,18252,18231,18209
			DC.W	18187,18166,18144,18123,18101,18080,18058,18037
			DC.W	18016,17995,17974,17953,17932,17911,17890,17870
			DC.W	17849,17828,17808,17787,17767,17746,17726,17706
			DC.W	17685,17665,17645,17625,17605,17585,17565,17545
			DC.W	17526,17506,17486,17466,17447,17427,17408,17388
			DC.W	17369,17350,17331,17311,17292,17273,17254,17235
			DC.W	17216,17197,17178,17159,17141,17122,17103,17085
			DC.W	17066,17047,17029,17011,16992,16974,16956,16937
			DC.W	16919,16901,16883,16865,16847,16829,16811,16793
			DC.W	16775,16757,16740,16722,16704,16686,16669,16651
			DC.W	16634,16616,16599,16582,16564,16547,16530,16512
			DC.W	16495,16478,16461,16444,16427,16410,16393,16376
			DC.W	16359,16343,16326,16309,16292,16276,16259,16242
			DC.W	16226,16209,16193,16176,16160,16144,16127,16111
			DC.W	16095,16079,16062,16046,16030,16014,15998,15982
			DC.W	15966,15950,15934,15918,15903,15887,15871,15855
			DC.W	15840,15824,15808,15793,15777,15762,15746,15731
			DC.W	15715,15700,15685,15669,15654,15639,15623,15608
			DC.W	15593,15578,15563,15548,15533,15518,15503,15488
			DC.W	15473,15458,15443,15428,15413,15399,15384,15369
			DC.W	15355,15340,15325,15311,15296,15282,15267,15253
			DC.W	15238,15224,15209,15195,15181,15166,15152,15138
			DC.W	15124,15110,15095,15081,15067,15053,15039,15025
			DC.W	15011,14997,14983,14969,14955,14941,14927,14914
			DC.W	14900,14886,14872,14859,14845,14831,14818,14804
			DC.W	14791,14777,14763,14750,14736,14723,14710,14696
			DC.W	14683,14669,14656,14643,14629,14616,14603,14590
			DC.W	14577,14563,14550,14537,14524,14511,14498,14485
			DC.W	14472,14459,14446,14433,14420,14407,14394,14382
			DC.W	14369,14356,14343,14330,14318,14305,14292,14280
			DC.W	14267,14254,14242,14229,14217,14204,14192,14179
			DC.W	14167,14154,14142,14129,14117,14105,14092,14080
			DC.W	14068,14056,14043,14031,14019,14007,13994,13982
			DC.W	13970,13958,13946,13934,13922,13910,13898,13886
			DC.W	13874,13862,13850,13838,13826,13814,13802,13791
			DC.W	13779,13767,13755,13743,13732,13720,13708,13697
			DC.W	13685,13673,13662,13650,13638,13627,13615,13604
			DC.W	13592,13581,13569,13558,13546,13535,13524,13512
			DC.W	13501,13489,13478,13467,13455,13444,13433,13422
			DC.W	13410,13399,13388,13377,13366,13355,13343,13332
			DC.W	13321,13310,13299,13288,13277,13266,13255,13244
			DC.W	13233,13222,13211,13200,13189,13178,13168,13157
			DC.W	13146,13135,13124,13114,13103,13092,13081,13071
			DC.W	13060,13049,13038,13028,13017,13007,12996,12985
			DC.W	12975,12964,12954,12943,12933,12922,12912,12901
			DC.W	12891,12880,12870,12859,12849,12839,12828,12818
			DC.W	12808,12797,12787,12777,12766,12756,12746,12736
			DC.W	12725,12715,12705,12695,12685,12675,12664,12654
			DC.W	12644,12634,12624,12614,12604,12594,12584,12574
			DC.W	12564,12554,12544,12534,12524,12514,12504,12494
			DC.W	12484,12474,12465,12455,12445,12435,12425,12415
			DC.W	12406,12396,12386,12376,12367,12357,12347,12338
			DC.W	12328,12318,12309,12299,12289,12280,12270,12260
			DC.W	12251,12241,12232,12222,12213,12203,12194,12184
			DC.W	12175,12165,12156,12146,12137,12128,12118,12109
			DC.W	12099,12090,12081,12071,12062,12053,12043,12034
			DC.W	12025,12016,12006,11997,11988,11979,11969,11960
			DC.W	11951,11942,11933,11923,11914,11905,11896,11887
			DC.W	11878,11869,11860,11851,11842,11833,11824,11815
			DC.W	11805,11797,11788,11779,11770,11761,11752,11743
			DC.W	11734,11725,11716,11707,11698,11689,11681,11672
			DC.W	11663,11654,11645,11636,11628,11619,11610,11601
			DC.W	11593,11584,11575,11566,11558,11549,11540,11532
			DC.W	11523,11514,11506,11497,11488,11480,11471,11463
			DC.W	11454,11446,11437,11428,11420,11411,11403,11394
			DC.W	11386,11377,11369,11360,11352,11343,11335,11327
			DC.W	11318,11310,11301,11293,11285,11276,11268,11259
			DC.W	11251,11243,11234,11226,11218,11210,11201,11193
			DC.W	11185,11176,11168,11160,11152,11143,11135,11127
			DC.W	11119,11111,11102,11094,11086,11078,11070,11062
			DC.W	11054,11046,11037,11029,11021,11013,11005,10997
			DC.W	10989,10981,10973,10965,10957,10949,10941,10933
			DC.W	10925,10917,10909,10901,10893,10885,10877,10869
			DC.W	10861,10853,10846,10838,10830,10822,10814,10806
			DC.W	10798,10791,10783,10775,10767,10759,10752,10744
			DC.W	10736,10728,10720,10713,10705,10697,10690,10682
			DC.W	10674,10666,10659,10651,10643,10636,10628,10620
			DC.W	10613,10605,10597,10590,10582,10575,10567,10559
			DC.W	10552,10544,10537,10529,10522,10514,10507,10499
			DC.W	10491,10484,10476,10469,10461,10454,10447,10439
			DC.W	10432,10424,10417,10409,10402,10394,10387,10380
			DC.W	10372,10365,10357,10350,10343,10335,10328,10321
			DC.W	10313,10306,10299,10291,10284,10277,10270,10262
			DC.W	10255,10248,10240,10233,10226,10219,10211,10204
			DC.W	10197,10190,10183,10175,10168,10161,10154,10147
			DC.W	10140,10132,10125,10118,10111,10104,10097,10090
			DC.W	10082,10075,10068,10061,10054,10047,10040,10033
			DC.W	10026,10019,10012,10005, 9998, 9991, 9984, 9977
			DC.W	 9970, 9963, 9956, 9949, 9942, 9935, 9928, 9921
			DC.W	 9914, 9907, 9900, 9893, 9886, 9879, 9872, 9866
			DC.W	 9859, 9852, 9845, 9838, 9831, 9824, 9817, 9811
			DC.W	 9804, 9797, 9790, 9783, 9776, 9770, 9763, 9756
			DC.W	 9749, 9743, 9736, 9729, 9722, 9715, 9709, 9702
			DC.W	 9695, 9688, 9682, 9675, 9668, 9662, 9655, 9648
			DC.W	 9642, 9635, 9628, 9622, 9615, 9608, 9602, 9595
			DC.W	 9588, 9582, 9575, 9568, 9562, 9555, 9549, 9542
			DC.W	 9535, 9529, 9522, 9516, 9509, 9502, 9496, 9489
			DC.W	 9483, 9476, 9470, 9463, 9457, 9450, 9444, 9437
			DC.W	 9431, 9424, 9418, 9411, 9405, 9398, 9392, 9385
			DC.W	 9379, 9373, 9366, 9360, 9353, 9347, 9340, 9334
			DC.W	 9328, 9321, 9315, 9308, 9302, 9296, 9289, 9283
			DC.W	 9277, 9270, 9264, 9257, 9251, 9245, 9238, 9232
			DC.W	 9226, 9220, 9213, 9207, 9201, 9194, 9188, 9182
			DC.W	 9175, 9169, 9163, 9157, 9150, 9144, 9138, 9132
			DC.W	 9126, 9119, 9113, 9107, 9101, 9094, 9088, 9082
			DC.W	 9076, 9070, 9064, 9057, 9051, 9045, 9039, 9033
			DC.W	 9027, 9020, 9014, 9008, 9002, 8996, 8990, 8984
			DC.W	 8978, 8971, 8965, 8959, 8953, 8947, 8941, 8935
			DC.W	 8929, 8923, 8917, 8911, 8905, 8899, 8893, 8887
			DC.W	 8881, 8875, 8869, 8863, 8857, 8851, 8845, 8839
			DC.W	 8833, 8827, 8821, 8815, 8809, 8803, 8797, 8791
			DC.W	 8785, 8779, 8773, 8767, 8761, 8755, 8749, 8743
			DC.W	 8738, 8732, 8726, 8720, 8714, 8708, 8702, 8696
			DC.W	 8690, 8685, 8679, 8673, 8667, 8661, 8655, 8650
			DC.W	 8644, 8638, 8632, 8626, 8620, 8615, 8609, 8603
			DC.W	 8597, 8591, 8586, 8580, 8574, 8568, 8563, 8557
			DC.W	 8551, 8545, 8540, 8534, 8528, 8522, 8517, 8511
			DC.W	 8505, 8499, 8494, 8488, 8482, 8477, 8471, 8465
			DC.W	 8460, 8454, 8448, 8443, 8437, 8431, 8426, 8420
			DC.W	 8414, 8409, 8403, 8397, 8392, 8386, 8380, 8375
			DC.W	 8369, 8364, 8358, 8352, 8347, 8341, 8336, 8330
			DC.W	 8324, 8319, 8313, 8308, 8302, 8297, 8291, 8286
			DC.W	 8280, 8274, 8269, 8263, 8258, 8252, 8247, 8241
			DC.W	 8236, 8230, 8225, 8219, 8214, 8208, 8203, 8197
			DC.W	 8192, 8186, 8181, 8175, 8170, 8164, 8159, 8154
			DC.W	 8148, 8143, 8137, 8132, 8126, 8121, 8116, 8110
			DC.W	 8105, 8099, 8094, 8088, 8083, 8078, 8072, 8067
			DC.W	 8062, 8056, 8051, 8045, 8040, 8035, 8029, 8024
			DC.W	 8019, 8013, 8008, 8003, 7997, 7992, 7987, 7981
			DC.W	 7976, 7971, 7965, 7960, 7955, 7949, 7944, 7939
			DC.W	 7934, 7928, 7923, 7918, 7912, 7907, 7902, 7897
			DC.W	 7891, 7886, 7881, 7876, 7870, 7865, 7860, 7855
			DC.W	 7849, 7844, 7839, 7834, 7829, 7823, 7818, 7813
			DC.W	 7808, 7803, 7797, 7792, 7787, 7782, 7777, 7772
			DC.W	 7766, 7761, 7756, 7751, 7746, 7741, 7735, 7730
			DC.W	 7725, 7720, 7715, 7710, 7705, 7700, 7694, 7689
			DC.W	 7684, 7679, 7674, 7669, 7664, 7659, 7654, 7649
			DC.W	 7643, 7638, 7633, 7628, 7623, 7618, 7613, 7608
			DC.W	 7603, 7598, 7593, 7588, 7583, 7578, 7573, 7568
			DC.W	 7563, 7558, 7553, 7548, 7543, 7538, 7533, 7528
			DC.W	 7523, 7518, 7513, 7508, 7503, 7498, 7493, 7488
			DC.W	 7483, 7478, 7473, 7468, 7463, 7458, 7453, 7448
			DC.W	 7443, 7438, 7433, 7428, 7423, 7418, 7413, 7409
			DC.W	 7404, 7399, 7394, 7389, 7384, 7379, 7374, 7369
			DC.W	 7364, 7360, 7355, 7350, 7345, 7340, 7335, 7330
			DC.W	 7325, 7321, 7316, 7311, 7306, 7301, 7296, 7291
			DC.W	 7287, 7282, 7277, 7272, 7267, 7263, 7258, 7253
			DC.W	 7248, 7243, 7238, 7234, 7229, 7224, 7219, 7214
			DC.W	 7210, 7205, 7200, 7195, 7191, 7186, 7181, 7176
			DC.W	 7172, 7167, 7162, 7157, 7152, 7148, 7143, 7138
			DC.W	 7134, 7129, 7124, 7119, 7115, 7110, 7105, 7100
			DC.W	 7096, 7091, 7086, 7082, 7077, 7072, 7068, 7063
			DC.W	 7058, 7053, 7049, 7044, 7039, 7035, 7030, 7025
			DC.W	 7021, 7016, 7011, 7007, 7002, 6997, 6993, 6988
			DC.W	 6984, 6979, 6974, 6970, 6965, 6960, 6956, 6951
			DC.W	 6947, 6942, 6937, 6933, 6928, 6924, 6919, 6914
			DC.W	 6910, 6905, 6901, 6896, 6891, 6887, 6882, 6878
			DC.W	 6873, 6869, 6864, 6859, 6855, 6850, 6846, 6841
			DC.W	 6837, 6832, 6828, 6823, 6818, 6814, 6809, 6805
			DC.W	 6800, 6796, 6791, 6787, 6782, 6778, 6773, 6769
			DC.W	 6764, 6760, 6755, 6751, 6746, 6742, 6737, 6733
			DC.W	 6728, 6724, 6719, 6715, 6710, 6706, 6702, 6697
			DC.W	 6693, 6688, 6684, 6679, 6675, 6670, 6666, 6661
			DC.W	 6657, 6653, 6648, 6644, 6639, 6635, 6630, 6626
			DC.W	 6622, 6617, 6613, 6608, 6604, 6600, 6595, 6591
			DC.W	 6586, 6582, 6578, 6573, 6569, 6565, 6560, 6556
			DC.W	 6551, 6547, 6543, 6538, 6534, 6530, 6525, 6521
			DC.W	 6517, 6512, 6508, 6503, 6499, 6495, 6490, 6486
			DC.W	 6482, 6477, 6473, 6469, 6464, 6460, 6456, 6452
			DC.W	 6447, 6443, 6439, 6434, 6430, 6426, 6421, 6417
			DC.W	 6413, 6409, 6404, 6400, 6396, 6391, 6387, 6383
			DC.W	 6379, 6374, 6370, 6366, 6362, 6357, 6353, 6349
			DC.W	 6345, 6340, 6336, 6332, 6328, 6323, 6319, 6315
			DC.W	 6311, 6306, 6302, 6298, 6294, 6290, 6285, 6281
			DC.W	 6277, 6273, 6268, 6264, 6260, 6256, 6252, 6247
			DC.W	 6243, 6239, 6235, 6231, 6227, 6222, 6218, 6214
			DC.W	 6210, 6206, 6202, 6197, 6193, 6189, 6185, 6181
			DC.W	 6177, 6172, 6168, 6164, 6160, 6156, 6152, 6148
			DC.W	 6143, 6139, 6135, 6131, 6127, 6123, 6119, 6115
			DC.W	 6110, 6106, 6102, 6098, 6094, 6090, 6086, 6082
			DC.W	 6078, 6074, 6069, 6065, 6061, 6057, 6053, 6049
			DC.W	 6045, 6041, 6037, 6033, 6029, 6025, 6021, 6016
			DC.W	 6012, 6008, 6004, 6000, 5996, 5992, 5988, 5984
			DC.W	 5980, 5976, 5972, 5968, 5964, 5960, 5956, 5952
			DC.W	 5948, 5944, 5940, 5936, 5932, 5928, 5924, 5920
			DC.W	 5916, 5912, 5908, 5904, 5900, 5896, 5892, 5888
			DC.W	 5884, 5880, 5876, 5872, 5868, 5864, 5860, 5856
			DC.W	 5852, 5848, 5844, 5840, 5836, 5832, 5828, 5824
			DC.W	 5820, 5816, 5812, 5808, 5804, 5800, 5796, 5793
			DC.W	 5789, 5785, 5781, 5777, 5773, 5769, 5765, 5761
			DC.W	 5757, 5753, 5749, 5745, 5742, 5738, 5734, 5730
			DC.W	 5726, 5722, 5718, 5714, 5710, 5706, 5703, 5699
			DC.W	 5695, 5691, 5687, 5683, 5679, 5675, 5671, 5668
			DC.W	 5664, 5660, 5656, 5652, 5648, 5644, 5641, 5637
			DC.W	 5633, 5629, 5625, 5621, 5617, 5614, 5610, 5606
			DC.W	 5602, 5598, 5594, 5591, 5587, 5583, 5579, 5575
			DC.W	 5571, 5568, 5564, 5560, 5556, 5552, 5549, 5545
			DC.W	 5541, 5537, 5533, 5530, 5526, 5522, 5518, 5514
			DC.W	 5511, 5507, 5503, 5499, 5495, 5492, 5488, 5484
			DC.W	 5480, 5477, 5473, 5469, 5465, 5462, 5458, 5454
			DC.W	 5450, 5447, 5443, 5439, 5435, 5432, 5428, 5424
			DC.W	 5420, 5417, 5413, 5409, 5405, 5402, 5398, 5394
			DC.W	 5390, 5387, 5383, 5379, 5376, 5372, 5368, 5364
			DC.W	 5361, 5357, 5353, 5350, 5346, 5342, 5338, 5335
			DC.W	 5331, 5327, 5324, 5320, 5316, 5313, 5309, 5305
			DC.W	 5302, 5298, 5294, 5290, 5287, 5283, 5279, 5276
			DC.W	 5272, 5268, 5265, 5261, 5257, 5254, 5250, 5247
			DC.W	 5243, 5239, 5236, 5232, 5228, 5225, 5221, 5217
			DC.W	 5214, 5210, 5206, 5203, 5199, 5196, 5192, 5188
			DC.W	 5185, 5181, 5177, 5174, 5170, 5167, 5163, 5159
			DC.W	 5156, 5152, 5149, 5145, 5141, 5138, 5134, 5131
			DC.W	 5127, 5123, 5120, 5116, 5113, 5109, 5105, 5102
			DC.W	 5098, 5095, 5091, 5088, 5084, 5080, 5077, 5073
			DC.W	 5070, 5066, 5063, 5059, 5055, 5052, 5048, 5045
			DC.W	 5041, 5038, 5034, 5031, 5027, 5023, 5020, 5016
			DC.W	 5013, 5009, 5006, 5002, 4999, 4995, 4992, 4988
			DC.W	 4985, 4981, 4978, 4974, 4971, 4967, 4964, 4960
			DC.W	 4956, 4953, 4949, 4946, 4942, 4939, 4935, 4932
			DC.W	 4928, 4925, 4921, 4918, 4914, 4911, 4908, 4904
			DC.W	 4901, 4897, 4894, 4890, 4887, 4883, 4880, 4876
			DC.W	 4873, 4869, 4866, 4862, 4859, 4855, 4852, 4848
			DC.W	 4845, 4842, 4838, 4835, 4831, 4828, 4824, 4821
			DC.W	 4817, 4814, 4811, 4807, 4804, 4800, 4797, 4793
			DC.W	 4790, 4787, 4783, 4780, 4776, 4773, 4769, 4766
			DC.W	 4763, 4759, 4756, 4752, 4749, 4745, 4742, 4739
			DC.W	 4735, 4732, 4728, 4725, 4722, 4718, 4715, 4711
			DC.W	 4708, 4705, 4701, 4698, 4695, 4691, 4688, 4684
			DC.W	 4681, 4678, 4674, 4671, 4667, 4664, 4661, 4657
			DC.W	 4654, 4651, 4647, 4644, 4641, 4637, 4634, 4630
			DC.W	 4627, 4624, 4620, 4617, 4614, 4610, 4607, 4604
			DC.W	 4600, 4597, 4594, 4590, 4587, 4584, 4580, 4577
			DC.W	 4574, 4570, 4567, 4564, 4560, 4557, 4554, 4550
			DC.W	 4547, 4544, 4540, 4537, 4534, 4530, 4527, 4524
			DC.W	 4521, 4517, 4514, 4511, 4507, 4504, 4501, 4497
			DC.W	 4494, 4491, 4488, 4484, 4481, 4478, 4474, 4471
			DC.W	 4468, 4465, 4461, 4458, 4455, 4451, 4448, 4445
			DC.W	 4442, 4438, 4435, 4432, 4429, 4425, 4422, 4419
			DC.W	 4416, 4412, 4409, 4406, 4402, 4399, 4396, 4393
			DC.W	 4389, 4386, 4383, 4380, 4377, 4373, 4370, 4367
			DC.W	 4364, 4360, 4357, 4354, 4351, 4347, 4344, 4341
			DC.W	 4338, 4334, 4331, 4328, 4325, 4322, 4318, 4315
			DC.W	 4312, 4309, 4306, 4302, 4299, 4296, 4293, 4290
			DC.W	 4286, 4283, 4280, 4277, 4274, 4270, 4267, 4264
			DC.W	 4261, 4258, 4254, 4251, 4248, 4245, 4242, 4238
			DC.W	 4235, 4232, 4229, 4226, 4223, 4219, 4216, 4213
			DC.W	 4210, 4207, 4204, 4200, 4197, 4194, 4191, 4188
			DC.W	 4185, 4181, 4178, 4175, 4172, 4169, 4166, 4163
			DC.W	 4159, 4156, 4153, 4150, 4147, 4144, 4141, 4137
			DC.W	 4134, 4131, 4128, 4125, 4122, 4119, 4115, 4112
			DC.W	 4109, 4106, 4103, 4100, 4097, 4094, 4091, 4087
			DC.W	 4084, 4081, 4078, 4075, 4072, 4069, 4066, 4063
			DC.W	 4059, 4056, 4053, 4050, 4047, 4044, 4041, 4038
			DC.W	 4035, 4032, 4028, 4025, 4022, 4019, 4016, 4013
			DC.W	 4010, 4007, 4004, 4001, 3998, 3995, 3991, 3988
			DC.W	 3985, 3982, 3979, 3976, 3973, 3970, 3967, 3964
			DC.W	 3961, 3958, 3955, 3952, 3949, 3946, 3942, 3939
			DC.W	 3936, 3933, 3930, 3927, 3924, 3921, 3918, 3915
			DC.W	 3912, 3909, 3906, 3903, 3900, 3897, 3894, 3891
			DC.W	 3888, 3885, 3882, 3879, 3876, 3873, 3870, 3867
			DC.W	 3864, 3860, 3857, 3854, 3851, 3848, 3845, 3842
			DC.W	 3839, 3836, 3833, 3830, 3827, 3824, 3821, 3818
			DC.W	 3815, 3812, 3809, 3806, 3803, 3800, 3797, 3794
			DC.W	 3791, 3788, 3785, 3782, 3779, 3776, 3773, 3770
			DC.W	 3767, 3765, 3762, 3759, 3756, 3753, 3750, 3747
			DC.W	 3744, 3741, 3738, 3735, 3732, 3729, 3726, 3723
			DC.W	 3720, 3717, 3714, 3711, 3708, 3705, 3702, 3699
			DC.W	 3696, 3693, 3690, 3687, 3685, 3682, 3679, 3676
			DC.W	 3673, 3670, 3667, 3664, 3661, 3658, 3655, 3652
			DC.W	 3649, 3646, 3643, 3640, 3638, 3635, 3632, 3629
			DC.W	 3626, 3623, 3620, 3617, 3614, 3611, 3608, 3605
			DC.W	 3602, 3600, 3597, 3594, 3591, 3588, 3585, 3582
			DC.W	 3579, 3576, 3573, 3570, 3568, 3565, 3562, 3559
			DC.W	 3556, 3553, 3550, 3547, 3544, 3542, 3539, 3536
			DC.W	 3533, 3530, 3527, 3524, 3521, 3518, 3516, 3513
			DC.W	 3510, 3507, 3504, 3501, 3498, 3495, 3493, 3490
			DC.W	 3487, 3484, 3481, 3478, 3475, 3472, 3470, 3467
			DC.W	 3464, 3461, 3458, 3455, 3452, 3450, 3447, 3444
			DC.W	 3441, 3438, 3435, 3433, 3430, 3427, 3424, 3421
			DC.W	 3418, 3415, 3413, 3410, 3407, 3404, 3401, 3398
			DC.W	 3396, 3393, 3390, 3387, 3384, 3381, 3379, 3376
			DC.W	 3373, 3370, 3367, 3365, 3362, 3359, 3356, 3353
			DC.W	 3350, 3348, 3345, 3342, 3339, 3336, 3334, 3331
			DC.W	 3328, 3325, 3322, 3320, 3317, 3314, 3311, 3308
			DC.W	 3306, 3303, 3300, 3297, 3294, 3292, 3289, 3286
			DC.W	 3283, 3280, 3278, 3275, 3272, 3269, 3266, 3264
			DC.W	 3261, 3258, 3255, 3253, 3250, 3247, 3244, 3242
			DC.W	 3239, 3236, 3233, 3230, 3228, 3225, 3222, 3219
			DC.W	 3217, 3214, 3211, 3208, 3206, 3203, 3200, 3197
			DC.W	 3195, 3192, 3189, 3186, 3184, 3181, 3178, 3175
			DC.W	 3173, 3170, 3167, 3164, 3162, 3159, 3156, 3153
			DC.W	 3151, 3148, 3145, 3142, 3140, 3137, 3134, 3131
			DC.W	 3129, 3126, 3123, 3121, 3118, 3115, 3112, 3110
			DC.W	 3107, 3104, 3101, 3099, 3096, 3093, 3091, 3088
			DC.W	 3085, 3082, 3080, 3077, 3074, 3072, 3069, 3066
			DC.W	 3063, 3061, 3058, 3055, 3053, 3050, 3047, 3045
			DC.W	 3042, 3039, 3036, 3034, 3031, 3028, 3026, 3023
			DC.W	 3020, 3018, 3015, 3012, 3010, 3007, 3004, 3002
			DC.W	 2999, 2996, 2993, 2991, 2988, 2985, 2983, 2980
			DC.W	 2977, 2975, 2972, 2969, 2967, 2964, 2961, 2959
			DC.W	 2956, 2953, 2951, 2948, 2945, 2943, 2940, 2937
			DC.W	 2935, 2932, 2929, 2927, 2924, 2921, 2919, 2916
			DC.W	 2914, 2911, 2908, 2906, 2903, 2900, 2898, 2895
			DC.W	 2892, 2890, 2887, 2884, 2882, 2879, 2876, 2874
			DC.W	 2871, 2869, 2866, 2863, 2861, 2858, 2855, 2853
			DC.W	 2850, 2848, 2845, 2842, 2840, 2837, 2834, 2832
			DC.W	 2829, 2827, 2824, 2821, 2819, 2816, 2813, 2811
			DC.W	 2808, 2806, 2803, 2800, 2798, 2795, 2793, 2790
			DC.W	 2787, 2785, 2782, 2780, 2777, 2774, 2772, 2769
			DC.W	 2767, 2764, 2761, 2759, 2756, 2754, 2751, 2748
			DC.W	 2746, 2743, 2741, 2738, 2735, 2733, 2730, 2728
			DC.W	 2725, 2723, 2720, 2717, 2715, 2712, 2710, 2707
			DC.W	 2704, 2702, 2699, 2697, 2694, 2692, 2689, 2686
			DC.W	 2684, 2681, 2679, 2676, 2674, 2671, 2669, 2666
			DC.W	 2663, 2661, 2658, 2656, 2653, 2651, 2648, 2646
			DC.W	 2643, 2640, 2638, 2635, 2633, 2630, 2628, 2625
			DC.W	 2623, 2620, 2617, 2615, 2612, 2610, 2607, 2605
			DC.W	 2602, 2600, 2597, 2595, 2592, 2590, 2587, 2584
			DC.W	 2582, 2579, 2577, 2574, 2572, 2569, 2567, 2564
			DC.W	 2562, 2559, 2557, 2554, 2552, 2549, 2547, 2544
			DC.W	 2542, 2539, 2536, 2534, 2531, 2529, 2526, 2524
			DC.W	 2521, 2519, 2516, 2514, 2511, 2509, 2506, 2504
			DC.W	 2501, 2499, 2496, 2494, 2491, 2489, 2486, 2484
			DC.W	 2481, 2479, 2476, 2474, 2471, 2469, 2466, 2464
			DC.W	 2461, 2459, 2456, 2454, 2451, 2449, 2446, 2444
			DC.W	 2441, 2439, 2437, 2434, 2432, 2429, 2427, 2424
			DC.W	 2422, 2419, 2417, 2414, 2412, 2409, 2407, 2404
			DC.W	 2402, 2399, 2397, 2394, 2392, 2389, 2387, 2385
			DC.W	 2382, 2380, 2377, 2375, 2372, 2370, 2367, 2365
			DC.W	 2362, 2360, 2358, 2355, 2353, 2350, 2348, 2345
			DC.W	 2343, 2340, 2338, 2335, 2333, 2331, 2328, 2326
			DC.W	 2323, 2321, 2318, 2316, 2313, 2311, 2309, 2306
			DC.W	 2304, 2301, 2299, 2296, 2294, 2292, 2289, 2287
			DC.W	 2284, 2282, 2279, 2277, 2274, 2272, 2270, 2267
			DC.W	 2265, 2262, 2260, 2258, 2255, 2253, 2250, 2248
			DC.W	 2245, 2243, 2241, 2238, 2236, 2233, 2231, 2229
			DC.W	 2226, 2224, 2221, 2219, 2216, 2214, 2212, 2209
			DC.W	 2207, 2204, 2202, 2200, 2197, 2195, 2192, 2190
			DC.W	 2188, 2185, 2183, 2180, 2178, 2176, 2173, 2171
			DC.W	 2168, 2166, 2164, 2161, 2159, 2157, 2154, 2152
			DC.W	 2149, 2147, 2145, 2142, 2140, 2137, 2135, 2133
			DC.W	 2130, 2128, 2126, 2123, 2121, 2118, 2116, 2114
			DC.W	 2111, 2109, 2107, 2104, 2102, 2099, 2097, 2095
			DC.W	 2092, 2090, 2088, 2085, 2083, 2080, 2078, 2076
			DC.W	 2073, 2071, 2069, 2066, 2064, 2062, 2059, 2057
			DC.W	 2055, 2052, 2050, 2047, 2045, 2043, 2040, 2038
			DC.W	 2036, 2033, 2031, 2029, 2026, 2024, 2022, 2019
			DC.W	 2017, 2015, 2012, 2010, 2008, 2005, 2003, 2001
			DC.W	 1998, 1996, 1994, 1991, 1989, 1987, 1984, 1982
			DC.W	 1980, 1977, 1975, 1973, 1970, 1968, 1966, 1963
			DC.W	 1961, 1959, 1956, 1954, 1952, 1949, 1947, 1945
			DC.W	 1942, 1940, 1938, 1935, 1933, 1931, 1928, 1926
			DC.W	 1924, 1921, 1919, 1917, 1915, 1912, 1910, 1908
			DC.W	 1905, 1903, 1901, 1898, 1896, 1894, 1891, 1889
			DC.W	 1887, 1885, 1882, 1880, 1878, 1875, 1873, 1871
			DC.W	 1868, 1866, 1864, 1862, 1859, 1857, 1855, 1852
			DC.W	 1850, 1848, 1846, 1843, 1841, 1839, 1836, 1834
			DC.W	 1832, 1830, 1827, 1825, 1823, 1820, 1818, 1816
			DC.W	 1814, 1811, 1809, 1807, 1805, 1802, 1800, 1798
			DC.W	 1795, 1793, 1791, 1789, 1786, 1784, 1782, 1780
			DC.W	 1777, 1775, 1773, 1770, 1768, 1766, 1764, 1761
			DC.W	 1759, 1757, 1755, 1752, 1750, 1748, 1746, 1743
			DC.W	 1741, 1739, 1737, 1734, 1732, 1730, 1728, 1725
			DC.W	 1723, 1721, 1719, 1716, 1714, 1712, 1710, 1707
			DC.W	 1705, 1703, 1701, 1698, 1696, 1694, 1692, 1689
			DC.W	 1687, 1685, 1683, 1680, 1678, 1676, 1674, 1671
			DC.W	 1669, 1667, 1665, 1663, 1660, 1658, 1656, 1654
			DC.W	 1651, 1649, 1647, 1645, 1642, 1640, 1638, 1636
			DC.W	 1634, 1631, 1629, 1627, 1625, 1622, 1620, 1618
			DC.W	 1616, 1614, 1611, 1609, 1607, 1605, 1603, 1600
			DC.W	 1598, 1596, 1594, 1591, 1589, 1587, 1585, 1583
			DC.W	 1580, 1578, 1576, 1574, 1572, 1569, 1567, 1565
			DC.W	 1563, 1561, 1558, 1556, 1554, 1552, 1550, 1547
			DC.W	 1545, 1543, 1541, 1539, 1536, 1534, 1532, 1530
			DC.W	 1528, 1525, 1523, 1521, 1519, 1517, 1515, 1512
			DC.W	 1510, 1508, 1506, 1504, 1501, 1499, 1497, 1495
			DC.W	 1493, 1491, 1488, 1486, 1484, 1482, 1480, 1477
			DC.W	 1475, 1473, 1471, 1469, 1467, 1464, 1462, 1460
			DC.W	 1458, 1456, 1454, 1451, 1449, 1447, 1445, 1443
			DC.W	 1441, 1438, 1436, 1434, 1432, 1430, 1428, 1425
			DC.W	 1423, 1421, 1419, 1417, 1415, 1412, 1410, 1408
			DC.W	 1406, 1404, 1402, 1400, 1397, 1395, 1393, 1391
			DC.W	 1389, 1387, 1384, 1382, 1380, 1378, 1376, 1374
			DC.W	 1372, 1369, 1367, 1365, 1363, 1361, 1359, 1357
			DC.W	 1354, 1352, 1350, 1348, 1346, 1344, 1342, 1340
			DC.W	 1337, 1335, 1333, 1331, 1329, 1327, 1325, 1322
			DC.W	 1320, 1318, 1316, 1314, 1312, 1310, 1308, 1305
			DC.W	 1303, 1301, 1299, 1297, 1295, 1293, 1291, 1288
			DC.W	 1286, 1284, 1282, 1280, 1278, 1276, 1274, 1272
			DC.W	 1269, 1267, 1265, 1263, 1261, 1259, 1257, 1255
			DC.W	 1253, 1250, 1248, 1246, 1244, 1242, 1240, 1238
			DC.W	 1236, 1234, 1231, 1229, 1227, 1225, 1223, 1221
			DC.W	 1219, 1217, 1215, 1213, 1210, 1208, 1206, 1204
			DC.W	 1202, 1200, 1198, 1196, 1194, 1192, 1190, 1187
			DC.W	 1185, 1183, 1181, 1179, 1177, 1175, 1173, 1171
			DC.W	 1169, 1167, 1164, 1162, 1160, 1158, 1156, 1154
			DC.W	 1152, 1150, 1148, 1146, 1144, 1142, 1140, 1137
			DC.W	 1135, 1133, 1131, 1129, 1127, 1125, 1123, 1121
			DC.W	 1119, 1117, 1115, 1113, 1110, 1108, 1106, 1104
			DC.W	 1102, 1100, 1098, 1096, 1094, 1092, 1090, 1088
			DC.W	 1086, 1084, 1082, 1080, 1077, 1075, 1073, 1071
			DC.W	 1069, 1067, 1065, 1063, 1061, 1059, 1057, 1055
			DC.W	 1053, 1051, 1049, 1047, 1045, 1043, 1040, 1038
			DC.W	 1036, 1034, 1032, 1030, 1028, 1026, 1024, 1022
			DC.W	 1020, 1018, 1016, 1014, 1012, 1010, 1008, 1006
			DC.W	 1004, 1002, 1000,  998,  996,  994,  991,  989
			DC.W	  987,  985,  983,  981,  979,  977,  975,  973
			DC.W	  971,  969,  967,  965,  963,  961,  959,  957
			DC.W	  955,  953,  951,  949,  947,  945,  943,  941
			DC.W	  939,  937,  935,  933,  931,  929,  927,  925
			DC.W	  923,  921,  919,  917,  915,  913,  911,  909
			DC.W	  907,  905,  902,  900,  898,  896,  894,  892
			DC.W	  890,  888,  886,  884,  882,  880,  878,  876
			DC.W	  874,  872,  870,  868,  866,  864,  862,  860
			DC.W	  858,  856,  854,  852,  850,  848,  846,  844
			DC.W	  842,  840,  838,  836,  834,  832,  830,  828
			DC.W	  827,  825,  823,  821,  819,  817,  815,  813
			DC.W	  811,  809,  807,  805,  803,  801,  799,  797
			DC.W	  795,  793,  791,  789,  787,  785,  783,  781
			DC.W	  779,  777,  775,  773,  771,  769,  767,  765
			DC.W	  763,  761,  759,  757,  755,  753,  751,  749
			DC.W	  747,  745,  743,  741,  740,  738,  736,  734
			DC.W	  732,  730,  728,  726,  724,  722,  720,  718
			DC.W	  716,  714,  712,  710,  708,  706,  704,  702
			DC.W	  700,  698,  696,  694,  692,  691,  689,  687
			DC.W	  685,  683,  681,  679,  677,  675,  673,  671
			DC.W	  669,  667,  665,  663,  661,  659,  657,  655
			DC.W	  654,  652,  650,  648,  646,  644,  642,  640
			DC.W	  638,  636,  634,  632,  630,  628,  626,  624
			DC.W	  623,  621,  619,  617,  615,  613,  611,  609
			DC.W	  607,  605,  603,  601,  599,  597,  595,  594
			DC.W	  592,  590,  588,  586,  584,  582,  580,  578
			DC.W	  576,  574,  572,  570,  569,  567,  565,  563
			DC.W	  561,  559,  557,  555,  553,  551,  549,  547
			DC.W	  546,  544,  542,  540,  538,  536,  534,  532
			DC.W	  530,  528,  526,  525,  523,  521,  519,  517
			DC.W	  515,  513,  511,  509,  507,  505,  504,  502
			DC.W	  500,  498,  496,  494,  492,  490,  488,  486
			DC.W	  485,  483,  481,  479,  477,  475,  473,  471
			DC.W	  469,  467,  466,  464,  462,  460,  458,  456
			DC.W	  454,  452,  450,  449,  447,  445,  443,  441
			DC.W	  439,  437,  435,  433,  432,  430,  428,  426
			DC.W	  424,  422,  420,  418,  417,  415,  413,  411
			DC.W	  409,  407,  405,  403,  402,  400,  398,  396
			DC.W	  394,  392,  390,  388,  387,  385,  383,  381
			DC.W	  379,  377,  375,  373,  372,  370,  368,  366
			DC.W	  364,  362,  360,  358,  357,  355,  353,  351
			DC.W	  349,  347,  345,  344,  342,  340,  338,  336
			DC.W	  334,  332,  331,  329,  327,  325,  323,  321
			DC.W	  319,  318,  316,  314,  312,  310,  308,  306
			DC.W	  305,  303,  301,  299,  297,  295,  293,  292
			DC.W	  290,  288,  286,  284,  282,  281,  279,  277
			DC.W	  275,  273,  271,  270,  268,  266,  264,  262
			DC.W	  260,  258,  257,  255,  253,  251,  249,  247
			DC.W	  246,  244,  242,  240,  238,  236,  235,  233
			DC.W	  231,  229,  227,  225,  224,  222,  220,  218
			DC.W	  216,  214,  213,  211,  209,  207,  205,  203
			DC.W	  202,  200,  198,  196,  194,  193,  191,  189
			DC.W	  187,  185,  183,  182,  180,  178,  176,  174
			DC.W	  172,  171,  169,  167,  165,  163,  162,  160
			DC.W	  158,  156,  154,  153,  151,  149,  147,  145
			DC.W	  143,  142,  140,  138,  136,  134,  133,  131
			DC.W	  129,  127,  125,  124,  122,  120,  118,  116
			DC.W	  115,  113,  111,  109,  107,  106,  104,  102
			DC.W	  100,   98,   97,   95,   93,   91,   89,   88
			DC.W	   86,   84,   82,   80,   79,   77,   75,   73
			DC.W	   71,   70,   68,   66,   64,   62,   61,   59
			DC.W	   57,   55,   53,   52,   50,   48,   46,   45
			DC.W	   43,   41,   39,   37,   36,   34,   32,   30
			DC.W	   28,   27,   25,   23,   21,   20,   18,   16
			DC.W	   14,   12,   11,    9,    7,    5,    4,    2
			DC.W	    0
			
; **********************************************************************

				SEG 	'APreferences'

Map8to12Bit		PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			FUNCTION Map8to12Bit (index: INTEGER;
;								  gamma: INTEGER): INTEGER;
;
;			Parameter Offsets

@result 	EQU 	12
@index		EQU 	10
@gamma		EQU 	8

;			Size of parameters

@params 	EQU 	4

;			Save registers

			LINK		A6,#0
			MOVEM.L		D3-D5,-(SP)

;			Default to zero

			CLR.W		@result(A6)

;			Get input value

			MOVE.W		@index(A6),D0
			BEQ.S		@exit

;			Look up in first table

			LEA 		LogTable8,A0
			ASL.W		#1,D0
			MOVE.W		(A0,D0.W),D0

;			Scale by gamma value

			MULU.W		@gamma(A6),D0
			ADD.L		#70,D0
			DIVU.W		#140,D0
			BVS.S		@exit

;			Clip of range table

			CMP.W		#60495,D0
			BLS.S		@1
			MOVE.W		#60495,D0
			
;			Check for white

@1			CMP.W		#1,D0
			BHI.S		@2
			MOVE.W		#4096,@result(A6)
			BRA.S		@exit
			
;			Perform a binary search on table

@2			LEA			LogTable12,A0
			CLR.W		D1
			MOVE.W		#4096,D2
			MOVE.W		#11,D3
			
;			Case on midpoint value
			
@3			MOVE.W		D1,D4
			ADD.W		D2,D4
			MOVE.W		(A0,D4.W),D5
			LSR.W		#1,D4
			CMP.W		D5,D0
			BHI.S		@4
			BLO.S		@5
			
;			Must be equal to midpoint

			MOVE.W		D4,@result(A6)
			BRA.S		@exit
			
;			Value is in first half of range

@4			MOVE.W		D4,D2
			DBF			D3,@3
			BRA.S		@6
			
;			Value is in second half of range

@5			MOVE.W		D4,D1
			DBF			D3,@3
			
;			No exact match was found, select closer

@6			MOVE.W		D1,D3
			ADD.W		D3,D3
			ADDA.W		D3,A0
			MOVE.W		(A0)+,D3
			SUB.W		D0,D3
			SUB.W		(A0),D0
			MOVE.W		D1,@result(A6)
			CMP.W		D0,D3
			BLS.S		@exit
			ADD.W		#1,@result(A6)

;			Clean up and exit

@exit		MOVEM.L		(SP)+,D3-D5
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'APreferences'

Map12to8Bit		PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			FUNCTION Map12to8Bit (index: INTEGER;
;								  gamma: INTEGER): INTEGER;
;
;			Parameter Offsets

@result 	EQU 	12
@index		EQU 	10
@gamma		EQU 	8

;			Size of parameters

@params 	EQU 	4

;			Save registers

			LINK		A6,#0
			MOVEM.L		D3-D5,-(SP)

;			Default to zero

			CLR.W		@result(A6)

;			Get input value

			MOVE.W		@index(A6),D0
			BEQ			@exit

;			Look up in first table

			LEA 		LogTable12,A0
			ASL.W		#1,D0
			MOVE.W		(A0,D0.W),D0

;			Scale by gamma value

			MULU.W		#140,D0
			CLR.L		D1
			MOVE.W		@gamma(A6),D1
			ASR.W		#1,D1
			ADD.L		D1,D1
			DIVU.W		@gamma(A6),D0
			BVS.S		@exit
			
;			Check for black

			CMP.W		#63480,D0
			BHS.S		@exit

;			Clip of range table

			CMP.W		#56422,D0
			BLS.S		@1
			MOVE.W		#56422,D0
			
;			Check for white

@1			CMP.W		#20,D0
			BHI.S		@2
			MOVE.W		#255,@result(A6)
			BRA.S		@exit
			
;			Perform a binary search on table

@2			LEA			LogTable8,A0
			MOVE.W		#-1,D1
			MOVE.W		#255,D2
			MOVE.W		#7,D3
			
;			Case on midpoint value
			
@3			MOVE.W		D1,D4
			ADD.W		D2,D4
			MOVE.W		(A0,D4.W),D5
			LSR.W		#1,D4
			CMP.W		D5,D0
			BHI.S		@4
			BLO.S		@5
			
;			Must be equal to midpoint

			MOVE.W		D4,@result(A6)
			BRA.S		@exit
			
;			Value is in first half of range

@4			MOVE.W		D4,D2
			DBF			D3,@3
			BRA.S		@6
			
;			Value is in second half of range

@5			MOVE.W		D4,D1
			DBF			D3,@3
			
;			No exact match was found, select closer

@6			MOVE.W		D1,D3
			ADD.W		D3,D3
			ADDA.W		D3,A0
			MOVE.W		(A0)+,D3
			SUB.W		D0,D3
			SUB.W		(A0),D0
			MOVE.W		D1,@result(A6)
			CMP.W		D0,D3
			BLS.S		@exit
			ADD.W		#1,@result(A6)

;			Clean up and exit

@exit		MOVEM.L		(SP)+,D3-D5
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

DoInkTransform	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE DoInkTransform (c: INTEGER;
;									  m: INTEGER;
;									  y: INTEGER;
;									  VAR r: INTEGER;
;									  VAR g: INTEGER;
;									  VAR b: INTEGER;
;									  transform: TInkTransform);
;
;			Parameter Offsets

@c			EQU 	28
@m			EQU 	26
@y			EQU 	24
@r			EQU 	20
@g			EQU 	16
@b			EQU 	12
@transform	EQU 	8

;			Size of parameters

@params 	EQU 	22

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D7,-(SP)
			
;			Find distance from cube side

			MOVE.W		#2048,D2
			MOVE.W		@c(A6),D0
			SUB.W		D2,D0
			BPL.S		@1
			NEG.W		D0
@1			MOVE.W		@m(A6),D1
			SUB.W		D2,D1
			BPL.S		@2
			NEG.W		D1
@2			CMP.W		D1,D0
			BGE.S		@3
			MOVE.W		D1,D0
@3			MOVE.W		@y(A6),D1
			SUB.W		D2,D1
			BPL.S		@4
			NEG.W		D1
@4			CMP.W		D1,D0
			BGE.S		@5
			MOVE.W		D1,D0
			
;			Convert to center tweek index

@5			MULU.W		D0,D0
			ASL.L		#6,D0
			SWAP		D0
			MOVE.W		#4096,D6
			SUB.W		D0,D6
			
;			Compute red result

			MOVE.L		@transform(A6),A0
			MOVE.L		#$08000,D7
			MOVE.L		@r(A6),A1
			BSR.S		@doit
			
;			Compute green result

			ADDA.W		#14,A0
			MOVE.L		@g(A6),A1
			BSR.S		@doit
			
;			Compute blue result

			ADDA.W		#14,A0
			MOVE.L		@b(A6),A1
			BSR.S		@doit
			
;			Clean up and exit

			MOVEM.L 	(SP)+,D3-D7
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)
			
;			Perform interpolation along cyan axis

@doit		MOVE.W		@c(A6),D5

			MOVE.W		6(A0),D0
			MULS.W		D5,D0
			ASL.L		#4,D0
			ADD.L		D7,D0
			SWAP		D0
			
			MOVE.W		8(A0),D1
			MOVE.W		4(A0),D2
			SUB.W		D1,D2
			MULS.W		D5,D2
			ASL.L		#4,D2
			ADD.L		D7,D2
			SWAP		D2
			ADD.W		D2,D1
			
			MOVE.W		10(A0),D2
			MOVE.W		2(A0),D3
			SUB.W		D2,D3
			MULS.W		D5,D3
			ASL.L		#4,D3
			ADD.L		D7,D3
			SWAP		D3
			ADD.W		D3,D2
			
			MOVE.W		(A0),D3
			MOVE.W		#4096,D4
			SUB.W		D3,D4
			MULS.W		D5,D4
			ASL.L		#4,D4
			ADD.L		D7,D4
			SWAP		D4
			ADD.W		D4,D3
			
;			Perform interpolation along magenta axis

			SUB.W		D0,D1
			MULS.W		@m(A6),D1
			ASL.L		#4,D1
			ADD.L		D7,D1
			SWAP		D1
			ADD.W		D1,D0
			
			SUB.W		D2,D3
			MULS.W		@m(A6),D3
			ASL.L		#4,D3
			ADD.L		D7,D3
			SWAP		D3
			ADD.W		D3,D2
			
;			Perform interpolation along yellow axis
			
			SUB.W		D0,D2
			MULS.W		@y(A6),D2
			ASL.L		#4,D2
			ADD.L		D7,D2
			SWAP		D2
			ADD.W		D2,D0
			
;			Add tweek value

			MOVE.W		12(A0),D1
			MULS.W		D6,D1
			ASL.L		#4,D1
			ADD.L		D7,D1
			SWAP		D1
			ADD.W		D1,D0
			
;			Save result and return

			MOVE.W		D0,(A1)
			RTS

; **********************************************************************

				SEG 	'ARes4'

FindSeedCMY 	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE FindSeedCMY (r: INTEGER;
;								   g: INTEGER;
;								   b: INTEGER;
;								   VAR c: INTEGER;
;								   VAR m: INTEGER;
;								   VAR y: INTEGER;
;								   coords: Ptr);
;
;			Parameter Offsets

@r			EQU 	28
@g			EQU 	26
@b			EQU 	24
@c			EQU 	20
@m			EQU 	16
@y			EQU 	12
@coords 	EQU 	8

;			Size of parameters

@params 	EQU 	22

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D7,-(SP)

;			Unload parameters

			MOVE.L		@coords(A6),A0
			MOVE.W		@r(A6),D0
			MOVE.W		@g(A6),D1
			MOVE.W		@b(A6),D2

;			Initialize loop

			CLR.W		D3
			MOVE.W		#$7FFF,D4
			MOVE.W		#215,D5

;			Find red distance

@1			MOVE.W		D0,D6
			SUB.W		(A0)+,D6
			BPL.S		@2
			NEG.W		D6

;			Add green distance

@2			MOVE.W		D1,D7
			SUB.W		(A0)+,D7
			BPL.S		@3
			NEG.W		D7
@3			ADD.W		D7,D6

;			Add blue distance

			MOVE.W		D2,D7
			SUB.W		(A0)+,D7
			BPL.S		@4
			NEG.W		D7
@4			ADD.W		D7,D6

;			See if less than best distance so far

			CMP.W		D4,D6
			BGE.S		@5

;			Record best

			MOVE.W		D6,D4
			MOVE.W		D5,D3

;			Move to next pixel

@5			DBF 		D5,@1

;			Decode index

			MOVE.W		#215,D2
			SUB.W		D3,D2
			EXT.L		D2
			MOVE.L		D2,D0
			DIVU.W		#36,D0
			MOVE.L		D2,D1
			DIVU.W		#6,D1
			EXT.L		D1
			DIVU.W		#6,D1
			SWAP		D1
			DIVU.W		#6,D2
			SWAP		D2

;			Return coords

			MOVE.L		@c(A6),A0
			MOVE.W		D0,(A0)
			MOVE.L		@m(A6),A0
			MOVE.W		D1,(A0)
			MOVE.L		@y(A6),A0
			MOVE.W		D2,(A0)

;			Clean up and exit

			MOVEM.L 	(SP)+,D3-D7
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

FindDeltaCMY	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE FindDeltaCMY (dr: INTEGER;
;									dg: INTEGER;
;									db: INTEGER;
;									VAR dc: INTEGER;
;									VAR dm: INTEGER;
;									VAR dy: INTEGER;
;									slope: Ptr);
;
;			Parameter Offsets

@dr 		EQU 	28
@dg 		EQU 	26
@db 		EQU 	24
@dc 		EQU 	20
@dm 		EQU 	16
@dy 		EQU 	12
@slope		EQU 	8

;			Size of parameters

@params 	EQU 	22

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D4,-(SP)

;			Unload parameters

			MOVE.L		@slope(A6),A0
			MOVE.W		@dr(A6),D0
			MOVE.W		@dg(A6),D1
			MOVE.W		@db(A6),D2

;			Compute delta cyan

			MOVE.W		(A0)+,D3
			MULS.W		D0,D3
			MOVE.W		(A0)+,D4
			MULS.W		D1,D4
			ADD.L		D4,D3
			MOVE.W		(A0)+,D4
			MULS.W		D2,D4
			ADD.L		D4,D3
			ADD.L		#128,D3
			ASR.L		#8,D3
			MOVE.L		@dc(A6),A1
			MOVE.W		D3,(A1)

;			Compute delta magenta

			MOVE.W		(A0)+,D3
			MULS.W		D0,D3
			MOVE.W		(A0)+,D4
			MULS.W		D1,D4
			ADD.L		D4,D3
			MOVE.W		(A0)+,D4
			MULS.W		D2,D4
			ADD.L		D4,D3
			ADD.L		#128,D3
			ASR.L		#8,D3
			MOVE.L		@dm(A6),A1
			MOVE.W		D3,(A1)

;			Compute delta yellow

			MULS.W		(A0)+,D0
			MULS.W		(A0)+,D1
			MULS.W		(A0)+,D2
			ADD.L		D1,D0
			ADD.L		D2,D0
			ADD.L		#128,D0
			ASR.L		#8,D0
			MOVE.L		@dy(A6),A1
			MOVE.W		D0,(A1)

;			Clean up and exit

			MOVEM.L 	(SP)+,D3-D4
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

ProjectFace 	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			FUNCTION ProjectFace (VAR r: INTEGER;
;								  VAR g: INTEGER;
;								  VAR b: INTEGER;
;								  face: Ptr): BOOLEAN;
;
;			Parameter Offsets

@result 	EQU 	24
@r			EQU 	20
@g			EQU 	16
@b			EQU 	12
@face		EQU 	8

;			Size of parameters

@params 	EQU 	16

;			Save registers

			LINK		A6,#0
			MOVEM.L 	A2-A3,-(SP)

;			Unload parameters

			MOVE.L		@face(A6),A0
			MOVE.L		@r(A6),A1
			MOVE.L		@g(A6),A2
			MOVE.L		@b(A6),A3

;			Default result is false

			CLR.B		@result(A6)

;			Compute offset vector

			MOVE.W		(A1),D0
			SUB.W		(A0),D0
			MOVE.W		(A2),D1
			SUB.W		2(A0),D1
			MOVE.W		(A3),D2
			SUB.W		4(A0),D2

;			Compute dot product with normal

			MULS.W		6(A0),D0
			MULS.W		8(A0),D1
			MULS.W		10(A0),D2
			ADD.L		D1,D0
			ADD.L		D2,D0

;			If less than or equal to zero, inside face

			BLE.S		@exit

;			Truncate dot product to 2 binary places

			ASL.L		#4,D0
			SWAP		D0

;			Multiply to unit normal

			MOVE.W		D0,D1
			MOVE.W		D0,D2
			MULS.W		6(A0),D0
			MULS.W		8(A0),D1
			MULS.W		10(A0),D2

;			Round values to nearest integers

			ADD.L		#$08000,D0
			SWAP		D0
			ADD.L		#$08000,D1
			SWAP		D1
			ADD.L		#$08000,D2
			SWAP		D2

;			See if the displacement in non-zero

			TST.W		D0
			BNE.S		@1
			TST.W		D1
			BNE.S		@1
			TST.W		D2
			BEQ.S		@exit

;			Subtract from initial point

@1			SUB.W		D0,(A1)
			SUB.W		D1,(A2)
			SUB.W		D2,(A3)

;			Set result flag

			MOVE.B		#1,@result(A6)

;			Clean up and exit

@exit		MOVEM.L 	(SP)+,A2-A3
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

ProjectEdge 	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			FUNCTION ProjectEdge (VAR r: INTEGER;
;								  VAR g: INTEGER;
;								  VAR b: INTEGER;
;								  edge: Ptr): LONGINT;
;
;			Parameter Offsets

@result 	EQU 	24
@r			EQU 	20
@g			EQU 	16
@b			EQU 	12
@face		EQU 	8

;			Size of parameters

@params 	EQU 	16

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D7/A2-A3,-(SP)

;			Unload parameters

			MOVE.L		@face(A6),A0
			MOVE.L		@r(A6),A1
			MOVE.L		@g(A6),A2
			MOVE.L		@b(A6),A3

;			Compute delta from head

			MOVE.W		(A1),D0
			SUB.W		(A0),D0
			MOVE.W		(A2),D1
			SUB.W		2(A0),D1
			MOVE.W		(A3),D2
			SUB.W		4(A0),D2

;			Compute dot product with edge vector

			MOVE.W		6(A0),D3
			SUB.W		(A0),D3
			MULS.W		D3,D0
			MOVE.W		8(A0),D3
			SUB.W		2(A0),D3
			MULS.W		D3,D1
			ADD.L		D1,D0
			MOVE.W		10(A0),D3
			SUB.W		4(A0),D3
			MULS.W		D3,D2
			ADD.L		D2,D0

;			If less than or equal to zero, project to head

			BGT.S		@1
			MOVE.W		(A0),D0
			MOVE.W		2(A0),D1
			MOVE.W		4(A0),D2
			BRA.S		@dist

;			If greater than or equal to len2, project to tail

@1			CMP.L		12(A0),D0
			BLT.S		@2
			MOVE.W		6(A0),D0
			MOVE.W		8(A0),D1
			MOVE.W		10(A0),D2
			BRA.S		@dist

;			Else somewhere along line

@2			MOVE.L		12(A0),D1
			MOVE.L		#$7FFF,D2

;			Scale till length is less than 32K

			BRA.S		@4
@3			ASR.L		#1,D0
			ASR.L		#1,D1
@4			CMP.L		D2,D1
			BGT.S		@3

;			Compute projection fraction to 14 bits

			SWAP		D0
			ASR.L		#2,D0
			DIVU.W		D1,D0

;			Scale edge vector

			MOVE.W		D0,D1
			MOVE.W		D0,D2
			MOVE.W		6(A0),D3
			SUB.W		(A0),D3
			MULS.W		D3,D0
			ASL.L		#2,D0
			ADD.L		#$08000,D0
			SWAP		D0
			MOVE.W		8(A0),D3
			SUB.W		2(A0),D3
			MULS.W		D3,D1
			ASL.L		#2,D1
			ADD.L		#$08000,D1
			SWAP		D1
			MOVE.W		10(A0),D3
			SUB.W		4(A0),D3
			MULS.W		D3,D2
			ASL.L		#2,D2
			ADD.L		#$08000,D2
			SWAP		D2

;			Add in head coords

			ADD.W		(A0),D0
			ADD.W		2(A0),D1
			ADD.W		4(A0),D2

;			Return squared distance to projected point

@dist		MOVE.W		(A1),D3
			MOVE.W		D0,(A1)
			SUB.W		D0,D3
			MULS.W		D3,D3
			MOVE.W		(A2),D4
			MOVE.W		D1,(A2)
			SUB.W		D1,D4
			MULS.W		D4,D4
			ADD.L		D4,D3
			MOVE.W		(A3),D4
			MOVE.W		D2,(A3)
			SUB.W		D2,D4
			MULS.W		D4,D4
			ADD.L		D4,D3
			MOVE.L		D3,@result(A6)

;			Clean up and exit

			MOVEM.L 	(SP)+,D3-D7/A2-A3
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

ProjectLine 	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			FUNCTION ProjectLine (VAR r: INTEGER;
;								  VAR g: INTEGER;
;								  VAR b: INTEGER;
;								  rr: INTEGER;
;								  gg: INTEGER;
;								  bb: INTEGER;
;								  face: Ptr): LONGINT;
;
;			Parameter Offsets

@result 	EQU 	30
@r			EQU 	26
@g			EQU 	22
@b			EQU 	18
@rr 		EQU 	16
@gg 		EQU 	14
@bb 		EQU 	12
@face		EQU 	8

;			Size of parameters

@params 	EQU 	22

;			Save registers

			LINK		A6,#0
			MOVEM.L 	A2-A3,-(SP)

;			Unload parameters

			MOVE.L		@face(A6),A0
			MOVE.L		@r(A6),A1
			MOVE.L		@g(A6),A2
			MOVE.L		@b(A6),A3

;			Default result is -1

			MOVE.L		#-1,@result(A6)

;			Compute first dot product

			MOVE.W		(A1),D0
			SUB.W		(A0),D0
			MULS.W		6(A0),D0
			MOVE.W		(A2),D1
			SUB.W		2(A0),D1
			MULS.W		8(A0),D1
			ADD.L		D1,D0
			MOVE.W		(A3),D1
			SUB.W		4(A0),D1
			MULS.W		10(A0),D1
			ADD.L		D1,D0

;			If less than zero, no intersection

			BLT.S		@exit

;			Compute second dot product

			MOVE.W		@rr(A6),D1
			SUB.W		(A0),D1
			MULS.W		6(A0),D1
			MOVE.W		@gg(A6),D2
			SUB.W		2(A0),D2
			MULS.W		8(A0),D2
			ADD.L		D2,D1
			MOVE.W		@bb(A6),D2
			SUB.W		4(A0),D2
			MULS.W		10(A0),D2
			ADD.L		D2,D1

;			If greater than or equal to zero, no intersection

			BGE.S		@exit

;			Compute total offset

			SUB.L		D0,D1
			NEG.L		D1

;			Scale total to fit in word

			MOVE.L		#$7FFF,D2
			BRA.S		@2
@1			ASR.L		#1,D0
			ASR.L		#1,D1
@2			CMP.L		D2,D1
			BGT.S		@1

;			Compute red offset

			MOVE.W		@rr(A6),D2
			SUB.W		(A1),D2
			MULS.W		D0,D2
			DIVS.W		D1,D2
			ADD.W		D2,(A1)
			MULS.W		D2,D2
			MOVE.L		D2,@result(A6)

;			Compute green offset

			MOVE.W		@gg(A6),D2
			SUB.W		(A2),D2
			MULS.W		D0,D2
			DIVS.W		D1,D2
			ADD.W		D2,(A2)
			MULS.W		D2,D2
			ADD.L		D2,@result(A6)

;			Compute blue offset

			MOVE.W		@bb(A6),D2
			SUB.W		(A3),D2
			MULS.W		D0,D2
			DIVS.W		D1,D2
			ADD.W		D2,(A3)
			MULS.W		D2,D2
			ADD.L		D2,@result(A6)

;			Clean up and exit

@exit		MOVEM.L 	(SP)+,A2-A3
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

ProjectGray 	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			FUNCTION ProjectGray (r: INTEGER;
;								  g: INTEGER;
;								  b: INTEGER;
;								  face: Ptr): INTEGER;
;
;			Parameter Offsets

@result 	EQU 	18
@r			EQU 	16
@g			EQU 	14
@b			EQU 	12
@face		EQU 	8

;			Size of parameters

@params 	EQU 	10

;			Save registers

			LINK		A6,#0

;			Default result is 0

			CLR.W		@result(A6)

;			Compute distance of plane to origin

			MOVE.L		@face(A6),A0
			MOVE.W		(A0),D0
			MULS.W		6(A0),D0
			MOVE.W		2(A0),D1
			MULS.W		8(A0),D1
			ADD.L		D1,D0
			MOVE.W		4(A0),D1
			MULS.W		10(A0),D1
			ADD.L		D1,D0
			BLE.S		@exit

;			Compute distance of point to plane

			MOVE.W		(A0),D1
			SUB.W		@r(A6),D1
			MULS.W		6(A0),D1
			MOVE.W		2(A0),D2
			SUB.W		@g(A6),D2
			MULS.W		8(A0),D2
			ADD.L		D2,D1
			MOVE.W		4(A0),D2
			SUB.W		@b(A6),D2
			MULS.W		10(A0),D2
			ADD.L		D2,D1

;			If above plane, move to plane

			BGE.S		@1
			CLR.L		D1

;			Subtract from first value

@1			SUB.L		D0,D1
			NEG.L		D1
			BMI.S		@exit

;			Scale to fit in word

			MOVE.L		#$0FFFF,D2
			BRA.S		@3
@2			ASR.L		#1,D0
			ASR.L		#1,D1
@3			CMP.L		D2,D0
			BGT.S		@2

;			Scale to range 0..4096

			MULU.W		#4096,D1
			MOVE.L		D0,D2
			ASR.L		#1,D2
			ADD.L		D2,D1
			DIVU.W		D0,D1

;			Save result

			MOVE.W		D1,@result(A6)

;			Clean up and exit

@exit		UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

ClipRGBValue	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE ClipRGBValue (VAR r: INTEGER;
;									VAR g: INTEGER;
;									VAR b: INTEGER);
;
;			Parameter Offsets

@r			EQU 	16
@g			EQU 	12
@b			EQU 	8

;			Size of parameters

@params 	EQU 	12

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D7/A2,-(SP)

;			Unload rgb values

			MOVE.L		@r(A6),A0
			MOVE.L		@g(A6),A1
			MOVE.L		@b(A6),A2
			MOVE.W		(A0),D0
			MOVE.W		(A1),D1
			MOVE.W		(A2),D2

;			Find minimum value

			MOVE.W		D0,D3
			CMP.W		D1,D3
			BLE.S		@1
			MOVE.W		D1,D3
@1			CMP.W		D2,D3
			BLE.S		@2
			MOVE.W		D2,D3

;			Find maximum value

@2			MOVE.W		D0,D4
			CMP.W		D1,D4
			BGE.S		@3
			MOVE.W		D1,D4
@3			CMP.W		D2,D4
			BGE.S		@4
			MOVE.W		D2,D4

;			Exit if do not need to clip

@4			TST.W		D3
			BMI.S		@5
			CMP.W		#4096,D4
			BLE.S		@11

;			Find luminosity

@5			MOVE.W		#30,D5
			MULS.W		D0,D5
			MOVE.W		#59,D6
			MULS.W		D1,D6
			ADD.L		D6,D5
			MOVE.W		#11,D6
			MULS.W		D2,D6
			ADD.L		D6,D5
			DIVS.W		#100,D5

;			If luminosity <= 0, set to black

			BGT.S		@6
			CLR.W		D0
			CLR.W		D1
			CLR.W		D2
			BRA.S		@10

;			If luminosity >= 4096, set to white

@6			CMP.W		#4096,D5
			BLT.S		@7
			MOVE.W		#4096,D0
			MOVE.W		D0,D1
			MOVE.W		D0,D2
			BRA.S		@10

;			See if clipping should be done at top or bottom

@7			MOVE.W		D5,D7
			SUB.W		D3,D7
			MOVE.W		#4096,D6
			SUB.W		D5,D6
			MULU.W		D6,D7
			MOVE.W		D4,D6
			SUB.W		D5,D6
			MULU.W		D5,D6
			CMP.L		D6,D7
			BGE.S		@8

;			Clip at top of scale

			MOVE.W		#4096,D6
			SUB.W		D5,D6
			MOVE.W		D4,D7
			SUB.W		D5,D7
			BRA.S		@9

;			Clip to bottom of scale

@8			MOVE.W		D5,D6
			MOVE.W		D5,D7
			SUB.W		D3,D7

;			Perform the clipping

@9			SUB.W		D5,D0
			SUB.W		D5,D1
			SUB.W		D5,D2
			MULS.W		D6,D0
			MULS.W		D6,D1
			MULS.W		D6,D2
			DIVS.W		D7,D0
			DIVS.W		D7,D1
			DIVS.W		D7,D2
			ADD.W		D5,D0
			ADD.W		D5,D1
			ADD.W		D5,D2

;			Save rgb value

@10 		MOVE.W		D0,(A0)
			MOVE.W		D1,(A1)
			MOVE.W		D2,(A2)

;			Clean up and exit

@11 		MOVEM.L 	(SP)+,D3-D7/A2
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ASeparation'

BuildFMTable1	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE BuildFMTable1 (table: Handle);
;
;			Parameter Offsets

@table		EQU 	8

;			Size of parameters

@params 	EQU 	4

;			Save registers

			LINK		A6,#0

;			Unload address

			MOVE.L		@table(A6),A0
			MOVE.L		(A0),A0

;			Double nested loop

			CLR.W		D0
@1			MOVE.W		#-256,D1

;			Compute table value

@2			MOVE.W		D0,D2
			MULS.W		D1,D2
			BMI.S		@3
			ADD.W		#8,D2
			BRA.S		@4
@3			SUB.W		#8,D2
@4			DIVS.W		#17,D2
			MOVE.B		D2,(A0)+

;			Close inner loop

			ADD.W		#1,D1
			CMP.W		#256,D1
			BNE.S		@2

;			Close outer loop

			ADD.W		#1,D0
			CMP.W		#18,D0
			BNE.S		@1

;			Clean up and exit

			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

					SEG 	'ASeparation'

DoColorCorrect		PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE DoColorCorrect (rPtr: Ptr;
;									  gPtr: Ptr;
;									  bPtr: Ptr;
;									  table1: Handle;
;									  table2: Handle;
;									  count: INTEGER);
;
;			Parameter Offsets

@rPtr		EQU 	26
@gPtr		EQU 	22
@bPtr		EQU 	18
@table1		EQU 	14
@table2		EQU 	10
@count		EQU 	8

;			Size of parameters

@params 	EQU 	18

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D7/A2-A5,-(SP)

;			Unload parameters

			MOVE.W		@count(A6),D7
			SUB.W		#1,D7

			MOVE.L		@rPtr(A6),A0
			MOVE.L		@gPtr(A6),A1
			MOVE.L		@bPtr(A6),A2

			MOVE.L		@table1(A6),A3
			MOVE.L		(A3),A3

			MOVE.L		@table2(A6),A5
			MOVE.L		(A5),A5
			ADDA.W		#$100,A5

;			Get RGB values

@1			CLR.L		D0
			CLR.L		D1
			CLR.L		D2
			MOVE.B		(A0),D0
			MOVE.B		(A1),D1
			MOVE.B		(A2),D2

;			Compute interpolation cell coordinates

			DIVU.W		#17,D0
			CMP.W		#15,D0
			BNE.S		@2
			MOVE.L		#$11000E,D0
@2			DIVU.W		#17,D1
			CMP.W		#15,D1
			BNE.S		@3
			MOVE.L		#$11000E,D1
@3			DIVU.W		#17,D2
			CMP.W		#15,D2
			BNE.S		@4
			MOVE.L		#$11000E,D2

;			Compute cell address

@4			MOVE.L		A3,A4
			ASL.W		#8,D0
			ADDA.W		D0,A4
			ASL.W		#4,D1
			ADDA.W		D1,A4
			ADDA.W		D2,A4

;			Compute fractional weights

			SWAP		D0
			SWAP		D1
			SWAP		D2
			ROR.W		#7,D0
			ROR.W		#7,D1
			ROR.W		#7,D2

;			Interpolate values

			BSR.S 		@doit
			MOVE.B		D3,(A0)+

			ADDA.W		#$1000,A4
			BSR.S 		@doit
			MOVE.B		D3,(A1)+

			ADDA.W		#$1000,A4
			BSR.S		@doit
			MOVE.B		D3,(A2)+

;			Move to next pixel

			DBF			D7,@1

;			Clean up and exit

			MOVEM.L 	(SP)+,D3-D7/A2-A5
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)
			
;			Interpolation routine

@doit		CLR.W		D3
			CLR.W		D4
			MOVE.B		(A4),D3
			MOVE.B		1(A4),D4
			SUB.W		D3,D4
			ADD.W		D2,D4
			ADD.B		(A5,D4.W),D3

			CLR.W		D4
			CLR.W		D5
			MOVE.B		16(A4),D4
			MOVE.B		16+1(A4),D5
			SUB.W		D4,D5
			ADD.W		D2,D5
			ADD.B		(A5,D5.W),D4

			SUB.W		D3,D4
			ADD.W		D1,D4
			ADD.B		(A5,D4.W),D3

			CLR.W		D4
			CLR.W		D5
			MOVE.B		256(A4),D4
			MOVE.B		256+1(A4),D5
			SUB.W		D4,D5
			ADD.W		D2,D5
			ADD.B		(A5,D5.W),D4

			CLR.W		D5
			CLR.W		D6
			MOVE.B		256+16(A4),D5
			MOVE.B		256+16+1(A4),D6
			SUB.W		D5,D6
			ADD.W		D2,D6
			ADD.B		(A5,D6.W),D5

			SUB.W		D4,D5
			ADD.W		D1,D5
			ADD.B		(A5,D5.W),D4

			SUB.W		D3,D4
			ADD.W		D0,D4
			ADD.B		(A5,D4.W),D3

			RTS

; **********************************************************************

				SEG 	'ASeparation'

CvtHVStoRGB		PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE CvtHVStoRGB (h: INTEGER;
;								   v: INTEGER;
;								   s: INTEGER;
;								   VAR r: INTEGER;
;								   VAR g: INTEGER;
;								   VAR b: INTEGER);
;
;			Parameter Offsets

@h			EQU 	24
@v			EQU 	22
@s			EQU 	20
@r			EQU 	16
@g			EQU		12
@b			EQU		8

;			Size of parameters

@params 	EQU 	18

;			Save registers

			LINK		A6,#0
			MOVE.L 		D3,-(SP)
			
;			Find maximum value

			MOVE.W		@v(A6),D0
			MULU.W		#255,D0
			ADD.W		#15,D0
			DIVU.W		#31,D0
			
;			Find gap

			MOVE.W		@s(A6),D1
			MULU.W		D0,D1
			ADD.W		#7,D1
			DIVU.W		#15,D1
			
;			Compute minimum value

			SUB.W		D1,D0
			
;			Compute index for tables

			MOVE.W		@h(A6),D2
			
;			Compute red value

			LEA			@table1,A0
			CLR.W		D3
			MOVE.B		(A0,D2.W),D3
			MULU.W		D1,D3
			ADD.W		#4,D3
			ASR.W		#3,D3
			ADD.W		D0,D3
			MOVE.L		@r(A6),A0
			MOVE.W		D3,(A0)

;			Compute green value

			LEA			@table2,A0
			CLR.W		D3
			MOVE.B		(A0,D2.W),D3
			MULU.W		D1,D3
			ADD.W		#4,D3
			ASR.W		#3,D3
			ADD.W		D0,D3
			MOVE.L		@g(A6),A0
			MOVE.W		D3,(A0)

;			Compute blue value

			LEA			@table3,A0
			CLR.W		D3
			MOVE.B		(A0,D2.W),D3
			MULU.W		D1,D3
			ADD.W		#4,D3
			ASR.W		#3,D3
			ADD.W		D0,D3
			MOVE.L		@b(A6),A0
			MOVE.W		D3,(A0)

;			Clean up and exit

			MOVE.L 		(SP)+,D3
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)
			
;			Red projection table

@table1		DC.B		8,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1
			DC.B		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
			DC.B		0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8
			DC.B		8

;			Green projection table

@table2		DC.B		0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8
			DC.B		8,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1
			DC.B		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
			DC.B		0

;			Blue projection table

@table3		DC.B		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
			DC.B		0,1,2,3,4,5,6,7,8,8,8,8,8,8,8,8
			DC.B		8,8,8,8,8,8,8,8,8,7,6,5,4,3,2,1
			DC.B		0

; **********************************************************************

				SEG 	'ASeparation'

BuildFMTable2	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE BuildFMTable2 (table: Handle);
;
;			Parameter Offsets

@table		EQU 	8

;			Size of parameters

@params 	EQU 	4

;			Save registers

			LINK		A6,#0

;			Unload address

			MOVE.L		@table(A6),A0
			MOVE.L		(A0),A0

;			Double nested loop

			CLR.W		D0
@1			MOVE.W		#-256,D1

;			Compute table value

@2			MOVE.W		D0,D2
			MULS.W		D1,D2
			ADD.W		#16,D2
			ASR.W		#5,D2
			MOVE.B		D2,(A0)+

;			Close inner loop

			ADD.W		#1,D1
			CMP.W		#256,D1
			BNE.S		@2

;			Close outer loop

			ADD.W		#1,D0
			CMP.W		#32,D0
			BNE.S		@1

;			Clean up and exit

			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

;			Macro to decode a zone's hue and saturation

			MACRO
			DoZone		&max,&mid,&min

			MOVE.L		&mid,D3
			SUB.B		&min,D3
			LSL.W		#8,D3
			MOVE.W		&max,D4
			SUB.B		&min,D4
			MOVE.W		D4,D5
			ASR.W		#1,D5
			ADD.W		D5,D3
			DIVU.W		D4,D3

			MULU.W		#480,D4
			MOVE.W		&max,D5
			ASR.W		#1,D5
			ADD.W		D5,D4
			DIVU.W		&max,D4

			MOVE.W		&max,D5

			ENDM

; **********************************************************************

					SEG 	'ASeparation'

DoSeparateColors	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE DoSeparateColors (cPtr: Ptr;
;										mPtr: Ptr;
;										yPtr: Ptr;
;										kPtr: Ptr;
;										table1: Handle;
;										table2: Handle;
;										count: INTEGER);
;
;			Parameter Offsets

@cPtr		EQU 	30
@mPtr		EQU 	26
@yPtr		EQU 	22
@kPtr		EQU 	18
@table1		EQU 	14
@table2		EQU		10
@count		EQU 	8

;			Size of parameters

@params 	EQU 	26

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D7/A2-A6,-(SP)

;			Unload parameters

			MOVE.W		@count(A6),D7
			SUB.W		#1,D7
			MOVE.L		@cPtr(A6),A0
			MOVE.L		@mPtr(A6),A1
			MOVE.L		@yPtr(A6),A2
			MOVE.L		@kPtr(A6),A3
			MOVE.L		@table1(A6),A4
			MOVE.L		(A4),A4
			MOVE.L		@table2(A6),A5
			MOVE.L		(A5),A5
			ADD.W		#$100,A5
			
;			Get RGB values

@1			CLR.L		D0
			CLR.L		D1
			CLR.L		D2
			MOVE.B		(A0),D0
			MOVE.B		(A1),D1
			MOVE.B		(A2),D2
			
;			Compute hue zone

			CMP.B		D2,D1
			BLO.S		@2
			CMP.B		D1,D0
			BHS.S		@3
			CMP.B		D2,D0
			BHS.S		@zone2
			BRA.S		@zone3
@2			CMP.B		D2,D0
			BHS			@zone6
			CMP.B		D1,D0
			BHS			@zone5
			BRA			@zone4
@3			CMP.B		D0,D2
			BNE.S		@zone1
			
;			Process pure gray values

			CLR.W		D3
			CLR.W		D4
			MOVE.W		D0,D5
			BRA			@cont
			
;			Process zone 1: RGB

@zone1		DoZone		D0,D1,D2
			BRA			@cont
			
;			Process zone 2: GRB

@zone2		DoZone		D1,D0,D2
			SUB.W		#512,D3
			NEG.W		D3
			BRA			@cont
			
;			Process zone 3: GBR

@zone3		DoZone		D1,D2,D0
			ADD.W		#512,D3
			BRA.S		@cont
			
;			Process zone 4: BGR

@zone4		DoZone		D2,D1,D0
			SUB.W		#1024,D3
			NEG.W		D3
			BRA.S		@cont
			
;			Process zone 5: BRG

@zone5		DoZone		D2,D0,D1
			ADD.W		#1024,D3
			BRA.S		@cont
			
;			Process zone 6: RBG

@zone6		DoZone		D0,D2,D1
			SUB.W		#1536,D3
			NEG.W		D3
			
;			Convert brightness to range 0..992

@cont		LEA			@bTable,A6
			LSL.W		#1,D5
			MOVE.W		(A6,D5.W),D5
			
;			Compute fractions

			MOVE.W		D3,D0
			AND.W		#31,D0
			ROR.W		#7,D0
			
			MOVE.W		D5,D1
			AND.W		#31,D1
			ROR.W		#7,D1
			
			MOVE.W		D4,D2
			AND.W		#31,D2
			ROR.W		#7,D2
			
;			Compute cell address

			MOVE.L		A4,A6
			
			AND.W		#$FFE0,D3
			LSL.W		#4,D3
			ADDA.W		D3,A6
			
			AND.W		#$FFE0,D5
			LSR.W		#1,D5
			ADDA.W		D5,A6
			
			LSR.W		#5,D4
			ADDA.W		D4,A6
			
;			Interpolate values

			BSR.S 		@doit
			MOVE.B		D3,(A0)+

			ADDA.W		#$6200,A6
			BSR.S 		@doit
			MOVE.B		D3,(A1)+

			ADDA.W		#$6200,A6
			BSR.S 		@doit
			MOVE.B		D3,(A2)+

			ADDA.W		#$6200,A6
			BSR.S 		@doit
			MOVE.B		D3,(A3)+

;			Move to next pixel

			DBF			D7,@1

;			Clean up and exit

			MOVEM.L 	(SP)+,D3-D7/A2-A6
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)
			
;			Interpolation routine

@doit		CLR.W		D3
			CLR.W		D4
			MOVE.B		(A6),D3
			MOVE.B		1(A6),D4
			SUB.W		D3,D4
			ADD.W		D2,D4
			ADD.B		(A5,D4.W),D3

			CLR.W		D4
			CLR.W		D5
			MOVE.B		16(A6),D4
			MOVE.B		16+1(A6),D5
			SUB.W		D4,D5
			ADD.W		D2,D5
			ADD.B		(A5,D5.W),D4

			SUB.W		D3,D4
			ADD.W		D1,D4
			ADD.B		(A5,D4.W),D3

			CLR.W		D4
			CLR.W		D5
			MOVE.B		512(A6),D4
			MOVE.B		512+1(A6),D5
			SUB.W		D4,D5
			ADD.W		D2,D5
			ADD.B		(A5,D5.W),D4

			CLR.W		D5
			CLR.W		D6
			MOVE.B		512+16(A6),D5
			MOVE.B		512+16+1(A6),D6
			SUB.W		D5,D6
			ADD.W		D2,D6
			ADD.B		(A5,D6.W),D5

			SUB.W		D4,D5
			ADD.W		D1,D5
			ADD.B		(A5,D5.W),D4

			SUB.W		D3,D4
			ADD.W		D0,D4
			ADD.B		(A5,D4.W),D3

			RTS
			
;			Brightness interpolation table

@bTable		DC.W		  0,  4,  8, 12, 16, 20, 24, 28
			DC.W		 32, 36, 40, 44, 48, 52, 56, 60
			DC.W		 64, 68, 71, 75, 78, 82, 85, 89
			DC.W		 92, 96,100,104,108,112,116,120
			DC.W		124,128,132,136,140,144,148,152
			DC.W		156,160,164,168,172,176,180,184
			DC.W		188,192,196,199,203,206,210,213
			DC.W		217,220,224,228,232,236,240,244
			DC.W		248,252,256,260,264,268,272,276
			DC.W		280,284,288,292,296,300,304,308
			DC.W		312,316,320,324,328,332,336,340
			DC.W		344,348,352,356,359,363,366,370
			DC.W		373,377,380,384,388,392,396,400
			DC.W		404,408,412,416,420,424,428,432
			DC.W		436,440,444,448,452,456,460,464
			DC.W		468,472,476,480,484,487,491,494
			DC.W		498,501,505,508,512,516,520,524
			DC.W		528,532,536,540,544,548,552,556
			DC.W		560,564,568,572,576,580,584,588
			DC.W		592,596,600,604,608,612,615,619
			DC.W		622,626,629,633,636,640,644,648
			DC.W		652,656,660,664,668,672,676,680
			DC.W		684,688,692,696,700,704,708,712
			DC.W		716,720,724,728,732,736,740,744
			DC.W		748,752,756,760,764,768,772,775
			DC.W		779,782,786,789,793,796,800,804
			DC.W		808,812,816,820,824,828,832,836
			DC.W		840,844,848,852,856,860,864,868
			DC.W		872,876,880,884,888,892,896,900
			DC.W		903,907,910,914,917,921,924,928
			DC.W		932,936,940,944,948,952,956,960
			DC.W		964,968,972,976,980,984,988,992

; **********************************************************************

				SEG 	'ASeparation'

DoReplaceBlack	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE DoReplaceBlack (cPtr: Ptr;
;									  mPtr: Ptr;
;									  yPtr: Ptr;
;									  kPtr: Ptr;
;									  table1: Ptr;
;									  table2: Ptr;
;									  count: INTEGER);
;
;			Parameter Offsets

@cPtr		EQU 	30
@mPtr		EQU 	26
@yPtr		EQU 	22
@kPtr		EQU 	18
@table1		EQU		14
@table2		EQU		10
@count		EQU 	8

;			Size of parameters

@params 	EQU 	26

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3/A2-A5,-(SP)

;			Unload parameters

			MOVE.W		@count(A6),D0
			SUB.W		#1,D0

			MOVE.L		@cPtr(A6),A0
			MOVE.L		@mPtr(A6),A1
			MOVE.L		@yPtr(A6),A2
			MOVE.L		@kPtr(A6),A3
			
			MOVE.L		@table1(A6),A4
			MOVE.L		@table2(A6),A5
			
			MOVE.L		#$08000,D3
			
;			Get black value

@1			CLR.W		D1
			MOVE.B		(A3)+,D1
			ADD.W		D1,D1
			MOVE.W		(A4,D1.W),D1

;			Adjust cyan value

			CLR.W		D2
			MOVE.B		(A0),D2
			ADD.W		D2,D2
			MOVE.W		(A4,D2.W),D2
			MULU.W		D1,D2
			ASL.L		#4,D2
			ADD.L		D3,D2
			SWAP		D2
			MOVE.B		(A5,D2.W),(A0)+

;			Adjust magenta value

			CLR.W		D2
			MOVE.B		(A1),D2
			ADD.W		D2,D2
			MOVE.W		(A4,D2.W),D2
			MULU.W		D1,D2
			ASL.L		#4,D2
			ADD.L		D3,D2
			SWAP		D2
			MOVE.B		(A5,D2.W),(A1)+

;			Adjust yellow value

			CLR.W		D2
			MOVE.B		(A2),D2
			ADD.W		D2,D2
			MOVE.W		(A4,D2.W),D2
			MULU.W		D1,D2
			ASL.L		#4,D2
			ADD.L		D3,D2
			SWAP		D2
			MOVE.B		(A5,D2.W),(A2)+

;			Move to next pixel

			DBF 		D0,@1

;			Clean up and exit

			MOVEM.L 	(SP)+,D3/A2-A5
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

				SEG 	'ARes4'

DoCMYK2Gray 	PROC	EXPORT

;			Calling sequence (Pascal conventions):
;
;			PROCEDURE DoCMYK2Gray (cPtr: Ptr;
;								   mPtr: Ptr;
;								   yPtr: Ptr;
;								   kPtr: Ptr;
;								   gPtr: Ptr;
;								   grayLUT: TRGBLookUpTable;
;								   count: INTEGER);
;
;			Parameter Offsets

@cPtr		EQU 	30
@mPtr		EQU 	26
@yPtr		EQU 	22
@kPtr		EQU 	18
@gPtr		EQU 	14
@grayLUT	EQU 	10
@count		EQU 	8

;			Size of parameters

@params 	EQU 	26

;			Save registers

			LINK		A6,#0
			MOVEM.L 	D3-D6/A2-A5,-(SP)

;			Unload parameters

			MOVE.W		@count(A6),D6
			SUB.W		#1,D6

			MOVE.L		@cPtr(A6),A0
			MOVE.L		@mPtr(A6),A1
			MOVE.L		@yPtr(A6),A2
			MOVE.L		@kPtr(A6),A3
			MOVE.L		@gPtr(A6),A4

			MOVE.L		@grayLUT(A6),A5

;			Initialize registers

			CLR.W		D0
			MOVE.W		#$100,D1
			MOVE.W		#$200,D2
			CLR.W		D3
			MOVE.W		#127,D4
			MOVE.W		#257,D5

;			Get CMYK values

@1			MOVE.B		(A0)+,D0
			MOVE.B		(A1)+,D1
			MOVE.B		(A2)+,D2
			MOVE.B		(A3)+,D3

;			Compute gray value

			MOVE.B		(A5,D0.W),D0
			ADD.B		(A5,D1.W),D0
			ADD.B		(A5,D2.W),D0
			MULU.W		D3,D0
			ADD.W		D4,D0
			MULU.W		D5,D0
			SWAP		D0

;			Save value and move to next

			MOVE.B		D0,(A4)+
			DBF 		D6,@1

;			Clean up and exit

			MOVEM.L 	(SP)+,D3-D6/A2-A5
			UNLK		A6
			MOVE.L		(SP)+,A0
			ADD.W		#@params,SP
			JMP 		(A0)

; **********************************************************************

			END
